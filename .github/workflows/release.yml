# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: release
on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-02-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
  NAMESPACE: web
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    # Clone the Helm chart
    - run: |
        git clone https://github.com/statcan/charts.git
        mkdir -p /home/runner/work/_temp/_github_home/
        echo ${{ secrets.KUBECONFIG }} | base64 --decode > /home/runner/work/_temp/_github_home/KUBECONFIG

    # Deploy Helm chart
    - uses: 'statcan/actions/helm@master'
      env:
        KUBECONFIG: /github/home/KUBECONFIG
      with:
        release: 'kubecost'
        namespace: 'kubecost'
        chart: './charts/stable/cost-analyzer'
        token: '${{ github.token }}'
        values: |
          cost-analyzer:
            kubecostToken: "${{ secrets.KUBECOST_TOKEN }}"
            ingress:
              enabled: true
              annotations:
                kubernetes.io/ingress.class: istio
              hosts:
                - "kubecost.${{ secrets.DOMAIN_NAME }}"
              paths:
                - '/*'
            prometheus:
              nodeExporter:
                tolerations:
                  - key: "dedicated"
                    operator: "Exists"
            kubecostProductConfigs:
              clusterName: "${{ env.CLUSTER_NAME }}"
              currencyCode: "CAD"
              azureBillingRegion: CA
              azureSubscriptionID: ${{ secrets.SUBSCRIPTION_ID }}
              azureClientID: ${{ secrets.CLIENT_ID }}
              azureTenantID: ${{ secrets.TENANT_ID }}
              productKey:
                enabled: true
                key: ${{ secrets.PRODUCT_KEY }}

    # Patch kubecost ingress
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: "-n kubecost patch --type=json ingress kubecost-cost-analyzer -p '[{\"op\":\"replace\",\"path\":\"/spec/rules/0/http/paths/0/backend/servicePort\",\"value\":9090}]'"

    # Run Kustomize
    - name: kustomize
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -k .
      env:
        KUBECOST_OIDC_CLIENT: ${{ secrets.KUBECOST_OIDC_CLIENT }}
        KUBECOST_OIDC_SECRET: ${{ secrets.KUBECOST_OIDC_SECRET }}
        KUBECOST_OIDC_DISCOVERY: ${{ secrets.KUBECOST_OIDC_DISCOVERY }}
        KUBECOST_ADMIN_POLICY_GROUP: ${{ secrets.KUBECOST_ADMIN_POLICY_GROUP }}
        KUBECOST_TENANT1_POLICY_GROUP: ${{ secrets.KUBECOST_TENANT1_POLICY_GROUP }}
        KUBECOST_TENANT1_DOMAIN_NAME: ${{ secrets.KUBECOST_TENANT1_DOMAIN_NAME }}
        KUBECOST_TENANT2_POLICY_GROUP: ${{ secrets.KUBECOST_TENANT2_POLICY_GROUP }}
        KUBECOST_TENANT2_DOMAIN_NAME: ${{ secrets.KUBECOST_TENANT2_DOMAIN_NAME }}

    # Apply Istio rule
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f istio/rule.yaml
